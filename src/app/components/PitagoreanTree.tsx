'use client'

import { MAX_DIGITS_TRIPLE } from "@/helpers/Constants"
import duration from "@/helpers/duration"
import string from "@/helpers/string"
import { TextField, Button, CircularProgress, Alert, FormGroup } from "@mui/material"
import Image from "next/image"
import { useEffect, useState } from "react"

export interface TreeElement {
    triple: bigint[];
    square: bigint[][];
}

export interface Tree {
    tree: TreeElement[][];
    time: number;
}

export interface Triple {
    triple: bigint[];
    square: bigint[][];
    time: number;
}

const PitagoreanTree = () => {
    const [tree, setTree] = useState<Tree>({tree: [], time: 0})
    const [loading, setLoading] = useState(false)

    const [error, setError] = useState(false)
    const [number, setNumber] = useState("")

    const [triple, setTriple] = useState<Triple>({
        triple: [BigInt(3), BigInt(4), BigInt(5)],
        square: [[BigInt(1), BigInt(1)], [BigInt(3), BigInt(2)]],
        time: 1
    })


    const size = 3

    const handleSend = () => {
        setLoading(true)
        const options = {
            method: "POST",
            headers: {
              "content-type": "application/json",
            },
            body: JSON.stringify({number: number.toString()}),
          }
        setError(false)
        fetch("/api/pitagoreanTriple", options)
            .then(res => res.json())
            .then(res => {
                if (res.error) {
                    setLoading(false)
                    setError(res.error)
                } else {
                    setTriple(res)
                    setLoading(false)
                }
            })
            .catch(error => {
                setLoading(false)
                setError(error)
            })
    }

    useEffect(() => {
        fetch("/api/pitagoreanTree?LIMIT=" + size.toString())
            .then(res => res.json())
            .then(res => setTree(res))
            .catch(error => setError(error))
    }, [])

    return <>
        <p>
            <Image src="/image4.png" height={100} width={100} alt="" />
            <Image src="/image2.png" height={100} width={200} alt=""/>
        </p>
        <hr />
        <p>Write a path in base 3 to generate a pithagorean triple. The max length of the path is {MAX_DIGITS_TRIPLE}.</p>
        <hr />
        <FormGroup row={true}>
            <TextField
                className="input"
                label="Number"
                type="string"
                value={number}
                onChange={(event => {
                    // This limit make the http parameters for a GET request fails.
                    const regex = new RegExp("[^012$]");
                    if (event.target.value.toString().length <= MAX_DIGITS_TRIPLE && !regex.test(event.target.value))
                        try {
                            setNumber(event.target.value)
                            setTriple({
                                triple: [],
                                square: [],
                                time: 0
                            })

                        } catch (e) {

                        }
                })}
            />
            <Button onClick={handleSend} variant="contained">GENERATE</Button>
            {loading && <CircularProgress/>}
        </FormGroup>
        <p>{error && <Alert severity="error">{error}</Alert>}</p>
        <hr />
        <p>More detail about what are we computing here, in the video: <a href="https://www.youtube.com/watch?v=94mV7Fmbx88" >https://www.youtube.com/watch?v=94mV7Fmbx88</a>. A visualization tool for the triples: <a href="https://www.geogebra.org/calculator/hd2hcvas">https://www.geogebra.org/calculator/hd2hcvas</a></p>
        { !error && <>
            {triple.square && triple.square.length === 2 && triple.square[0].length === 2  && triple.square[1].length === 2 && <>
                <hr />
                <p>The pithagorean triple generated by the path &apos;{number.length < 25 ? number : (number.slice(0, 5) + " ... " + number.slice(-5))}&apos;, took {number.length} steps in {duration(triple.time)}</p>
                <hr />
                <p>The fibonacci-like square generated:</p>
                <hr />
                <table><tbody>
                    <tr><td>{string(triple.square[0][0])}</td><td>{string(triple.square[0][1])}</td></tr>
                    <tr><td>{string(triple.square[1][0])}</td><td>{string(triple.square[1][1])}</td></tr>
                </tbody></table>
                
            </>}
            {triple.triple && triple.triple && triple.triple.length === 3 && <>
                <hr />
                <p>The pithagorean triple generated:</p>
                <hr />
                <p>&lt;
                    {<span key={triple.triple[0].toString()} title={triple.triple[0].toString()}>{string(triple.triple[0])}</span>},&nbsp; 
                    {<span key={triple.triple[1].toString()} title={triple.triple[1].toString()}>{string(triple.triple[1])}</span>},&nbsp;
                    {<span key={triple.triple[2].toString()} title={triple.triple[2].toString()}>{string(triple.triple[2])}</span>}
                &gt;</p>
            </>}
            <hr />
        </>}
        <p>Pitagorean tree of length 3</p>
        <hr />
        <pre>
            <table className="pithagorean"><tbody>{tree.tree.length > 0 && (<>
                <tr>
                    <td>&lt;{tree.tree[0][0].triple.join(" ")}&gt;</td>
                </tr>
                <tr>
                    <td>
                        <table className="pithagorean"><tbody><tr>{tree.tree[1].map(el => <td key={el.triple.toString()}>&lt;{el.triple.join(" ")}&gt;</td>)}</tr></tbody></table>
                    </td>
                </tr>
                <tr>
                    <td>
                    <table className="pithagorean"><tbody><tr>
                            <td key={"1"}><table className="pithagorean"><tbody><tr>{tree.tree[2].slice(0, 3).map(el => <td key={el.triple.toString()}>&lt;{el.triple.join(" ")}&gt;</td>)}</tr></tbody></table></td>
                            <td key={"2"}><table className="pithagorean"><tbody><tr>{tree.tree[2].slice(3, 6).map(el => <td key={el.triple.toString()}>&lt;{el.triple.join(" ")}&gt;</td>)}</tr></tbody></table></td>
                            <td key={"3"}><table className="pithagorean"><tbody><tr>{tree.tree[2].slice(6, 9).map(el => <td key={el.triple.toString()}>&lt;{el.triple.join(" ")}&gt;</td>)}</tr></tbody></table></td>
                        </tr></tbody></table>
                    </td>
                </tr>
            </>)}</tbody></table>
        </pre>
        <hr />
        <p>Tree of height {size} calculated in {duration(tree.time)}</p>
    </>
}

export default PitagoreanTree;