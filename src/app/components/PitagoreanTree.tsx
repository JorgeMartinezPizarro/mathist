'use client'

import { TextField, Button, CircularProgress } from "@mui/material"
import { useEffect, useState } from "react"

export default () => {
    const [tree, setTree] = useState({tree: [], time: 0})

    const [number, setNumber] = useState(0)

    const [triple, setTriple] = useState({
        triple: [3,4,5],
        square: [[1, 1], [3, 2]],
        time: 0
    })


    const size = 5

    const handleSend = () => {
        fetch("/api/pitagoreanTriple?" + (new URLSearchParams( {LIMIT: number})).toString())
            .then(res => res.json())
            .then(res => {
                setTriple(res)
            })
            .catch(error => alert("WTF"))
    }

    useEffect(() => {
        fetch("/api/pitagoreanTree?" + ( new URLSearchParams( {LIMIT: size} ) ).toString())
            .then(res => res.json())
            .then(res => setTree(res))
            .catch(error => alert("WTF"))
    }, [])

    return <div>
        <div>
            <img src="/image4.png" height={200}  />
            <img src="/image2.png" height={200}  />
        </div>
        <TextField
            className="input"
            type="number"
            value={number}
            onChange={(event => {
                if (event.target.value.toString().length < 13)
                    setNumber(parseInt(event.target.value))
            })}
        />
        <Button onClick={handleSend} variant="contained">Submit</Button>
        <div />
        <p>The pithagorean triple generated by the number {number}, which in base 3 means the path over the tree: {triple.path} took {triple.time} ms. </p>
        <p>More detail about what are we computing here, in the video: <a href="https://www.youtube.com/watch?v=94mV7Fmbx88" >https://www.youtube.com/watch?v=94mV7Fmbx88</a></p>
        <div />
        {"|" + triple.square[0][0] + ", " + triple.square[0][1] + "|"}
        <div></div>
        {"|" + triple.square[1][0] + ", " + triple.square[1][1] + "|"}
        <div />
        {"<" + triple.triple[0] + ", " + triple.triple[1] + ", " + triple.triple[2] + ">"}
        <div />
        {<div>Tree of height {size} calculated in {tree.time} ms</div>}
        <div />
        <div>{
            tree.tree.map(serie => <ul key={serie.toString()}>{serie.map(triple => {
                const x = "<" + triple.triple[0] + ", " + triple.triple[1] + ", " + triple.triple[2] + ">"
                return <li key={x}>{x}</li>
            })}</ul>)
        }</div>
        
        
    </div>
}
